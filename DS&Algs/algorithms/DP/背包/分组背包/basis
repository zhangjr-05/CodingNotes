有K组物品 每组有若干个物品
第i组的第j个物品重量为w[i][j] 价值为v[i][j]
每组最多只能选择一个物品（也可以一个不选）
背包容量为V
目标：选择物品放入背包，使总价值最大，且总重量不超过背包容量

状态定义
dp[i][j] = 考虑前i组物品 背包容量为j时 能获得的最大价值

状态转移方程
对于第i组 我们可以选择不拿任何物品 或者选择组内的某一个物品
dp[i][j] = max(dp[i-1][j], max(dp[i-1][j-w[i][k]] + v[i][k]))   # k遍历第i组的所以物品

一维空间优化
for group in groups:
    # 必须逆序遍历容量 避免同一组物品被多次选择
    for j in range(V, 0, -1):
        for weight, value in group:
            if j >= weight:
                dp[j] = max(dp[j], dp[j - weight] + value)


变体

每组必须选择一个物品
dp = [float('-inf')] * (V + 1)
dp[0] = 0   # 容量为0价值为0
