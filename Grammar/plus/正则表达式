import re

# 匹配规则
\w  # 字母数字下划线
\W  # 非字母数字下划线
\s  # 任意空白字符，即[\t\n\r\f]
\S  # 任意非空字符
\d  # 数字，即[0-9]
\D  # 非数字
\A  # 字符串开头
\Z  # 字符串结尾，只匹配到换行前的结束字符串
\z  # 字符串结尾，包括换行符
\G  # 最后匹配完成的位置
\n  # 一个换行符
\t  # 一个制表符
\b  # 单词边界
\B  # 非单词边界
^   # 从头开始
$   # 直到结尾
.   # 任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符
\.  # 表示.本身

[...]   # 表示一组字符，单独列出
[^...]  # 不在[]中的字符
*   # 0个或多个表达式   匹配前面的字符无限次
+   # 1个或多个表达式
?   # 0个或1个前面的正则表达式定义的片段，非贪婪模式

{m}     # 匹配前一个规则的字符出现m次
{m,}    # 匹配前一个规则的字符出现至少m次
{m,n}  # 匹配前一个规则的字符出现m-n次  # tips: m与n间不要空格！不要空格！不要空格！

()  # 捕获组
(?:)    # 非捕获组
(?:abc|def) # |表示或

# pattern   # 匹配的正则表达式
# string    # 要匹配的字符串
# flags     # 标志位，用于控制正则表达式的匹配方式


match = re.match(pattern=None, string=None, flags=None)    # 只匹配开始
re.search(pattern=None, string=None, flags=None)   # 匹配整个str，直到找到第一个匹配
re.findall(pattern=None, string=None, flags=None)  # 找到所有，返回列表
re.sub(pattern=None, repl=None, string=None, count=0, flags=None) # 替换，count表示替换最大次数，默认0表示替换所有的匹配
re.comlile(pattern, flags=0)    # 将正则字符串编译成正则表达式对象，以便在后面的匹配中复用

# 匹配对象方法
match.group(num=0)  # 匹配的整个表达式的字符串，group()可以一次输入多个组号，返回元组
match.groups()      # 返回一个包含所有小组字符串的元组
match.span()        # 返回下标区间

