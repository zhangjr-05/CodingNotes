import torch
from torch.utils.data import Dataset
from torch.utils.data import DataLoader

# 自定义数据集类，要求重写三个函数
class MyDataset(Dataset):
    def __init__(self, x_data, y_data):
        self.x_data = x_data
        self.y_data = y_data

    def __len__(self):
        return len(self.x_data)

    def __getitem__(self, index):
        x = torch.tensor(self.x_data[index], dtype=torch.float32)
        y = torch.tensor(self.y_data[index], dtype=torch.float32)
        return x, y

x_data = [[1, 2], [3, 4], [5, 6], [7, 8]]
y_data = [1, 0, 1, 0]
dataset = MyDataset(x_data, y_data)

# 使用DataLoader加载数据
dataloader = DataLoader(dataset, batch_size=2, shuffle=True)
for epoch in range(1):
    for batch_idx, (inputs, labels) in enumerate(dataloader):
        print(f'Batch {batch_idx + 1}:')
        print(f'Inputs: {inputs}')
        print(f'Labels: {labels}')


# 预处理与数据增强
import torchvision.transforms as transforms
from PIL import Image
# 定义数据预处理的流水线
transform = transforms.Compose([    # Compose()将多个变换操作组合在一起
    transforms.Resize((128, 128)),  # 调整图像大小
    transforms.ToTensor(),          # 转化为tensor，值归一化到[0, 1]范围
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]) # 标准化处理
])
image = Image.open(r'D:\mypython\images\阿尔托莉雅.jpg')    # 加载图像
image_tensor = transform(image)